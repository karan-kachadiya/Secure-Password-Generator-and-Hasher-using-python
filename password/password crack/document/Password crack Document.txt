# SHA-1 Password Cracker Code Explanation

## Overview
This Python script is designed to crack a user-provided SHA-1 hash by checking it against a list of plaintext passwords stored in multiple text files. If the plaintext password corresponding to the provided hash is found, it prints the password; otherwise, it notifies the user that the password is not listed.

## Code Breakdown

### 1. Importing the Required Module
```python
import hashlib
```
- The `hashlib` module is imported to provide access to hashing functions, including SHA-1.

### 2. Function Definition: `convert_text_file_to_sha1`
```python
def convert_text_file_to_sha1(text):
    digest = hashlib.sha1(text.encode()).hexdigest()
    return digest
```
- This function takes a plaintext string (`text`), encodes it, and computes its SHA-1 hash. The result is returned as a hexadecimal string.

### 3. Main Function: `main`
```python
def main():
```
- The main function orchestrates the program's flow, including user input and password checking.

#### 3.1 User Input
```python
user_sha1 = input("Enter the hash to crack: ")
cleaned_user_sha1 = user_sha1.strip().lower()
```
- The user is prompted to enter a SHA-1 hash. The input is cleaned by stripping whitespace and converting it to lowercase to ensure consistent comparison.

#### 3.2 List of Password Files
```python
password_files = [
    './my_password.txt',
    './my_password1.txt',
    './my_password2.txt',
    './my_password3.txt',
    './my_password4.txt'
]
```
- A list of password files to check against the provided hash is defined.

#### 3.3 Password Searching Logic
```python
found_password = False  # Flag to check if password is found
for filename in password_files:
    try:
        with open(filename) as passw:
```
- A flag (`found_password`) is initialized to track if a matching password is found. The script attempts to open each file in the list.

##### 3.3.1 Password Checking
```python
for line in passw:
    password = line.strip()
    converted_sha1 = convert_text_file_to_sha1(password)

    if cleaned_user_sha1 == converted_sha1:
        print(f"Password found: {password}")
        found_password = True
        break
```
- Each password in the file is stripped of whitespace and converted to its SHA-1 hash. If a match is found with the user-provided hash, it prints the found password and updates the flag.

##### 3.3.2 Handling File Not Found
```python
except FileNotFoundError:
    print(f"Warning: {filename} not found. Skipping.")
```
- If a password file is not found, a warning is printed, and the script continues with the next file.

#### 3.4 Final Check
```python
if not found_password:
    print("Oops! Password is not listed.")
```
- If no matching password is found after checking all files, the user is notified.

### 4. Execution Block
```python
if __name__ == "__main__":  
    main()
```
- This block ensures that the `main` function runs only when the script is executed directly, not when imported as a module.

## Step-by-Step Instructions to Run the Code

0. https://passwordsgenerator.net/sha1-hash-generator/ this is the web-side from where you can change the text to SHA1 hash value 

1. **Prerequisites**: Ensure you have Python installed on your machine. This script uses Python 3.

2. **Prepare Password Files**: Create text files named `my_password.txt`, `my_password1.txt`, `my_password2.txt`, `my_password3.txt`, and `my_password4.txt` in the same directory as the script. Populate these files with plaintext passwords (one password per line).

3. **Copy the Code**: Copy the provided Python code into a file named `password_cracker.py`.

4. **Open Terminal/Command Prompt**: Navigate to the directory where the `password_cracker.py` file is located.

5. **Run the Script**: Execute the script using the command:
   ```bash
   python password_cracker.py
   ```

6. **Input the SHA-1 Hash**: When prompted, enter the SHA-1 hash you want to crack. For example:
   ```
   Enter the hash to crack: 82EB74280C116D2DB29471FAAD2D0C69B4D29968
   ```

7. **View Results**:
   - If a matching password is found, it will display:
     ```
     Password found: <matching_password>
     ```
   - If no match is found in any of the files, it will display:
     ```
     Oops! Password is not listed.
     ```

8. **Close the Script**: Once the results are displayed, you can close the terminal/command prompt.

## Conclusion
This script provides a straightforward approach to cracking SHA-1 hashes by comparing them against a list of potential plaintext passwords. By following the above steps, users can easily run the script and find matching passwords if they exist in the specified files.



https://github.com/karanhackcode/malware/tree/main